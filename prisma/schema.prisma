datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  DEVELOPER
  TECHNIC
  REPORTER
  KRU
}

model User {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?        @unique
  emailVerified DateTime?
  image     String?
  role      Role           @default(KRU)
  createdAt DateTime       @default(now())
  authored  AuthorOnPost[]
  accounts  Account[]
  sessions  Session[]
  shortLinks ShortLink[]
  podcasts  Podcast[]
}

model BlogPost {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String         @unique
  content     String
  description String?
  readTime    String?
  category    String?
  mainImage   String?
  tags        String[]
  isFeatured  Boolean        @default(false)
  authors     AuthorOnPost[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model AuthorOnPost {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  userId String   @db.ObjectId
  post   BlogPost @relation(fields: [postId], references: [id])
  postId String   @db.ObjectId
}

model ShortLink {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  destination String
  slug        String   @unique
  title       String?
  domain      String   @default("8eh.link")
  password    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clicks      ShortLinkClick[]
}

model ShortLinkClick {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  shortLinkId String   @db.ObjectId
  shortLink   ShortLink @relation(fields: [shortLinkId], references: [id], onDelete: Cascade)
  ipAddress   String?
  userAgent   String?
  referer     String?
  country     String?
  city        String?
  clickedAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?    @db.Int
  token_type        String? @db.String
  scope             String? @db.String
  id_token          String? @db.String
  session_state     String? @db.String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier], map: "token_identifier_index")
}

model WhitelistedEmail {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  createdAt DateTime @default(now())
}

model Podcast {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle    String?
  description String
  date        String?
  duration    String?
  audioUrl    String
  image       String?
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}
